{"version":3,"sources":["http-common.js","services/customer.service.js","components/add-customer.component.js","components/customer.component.js","components/customers-list.component.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","http","get","id","data","post","put","delete","firstName","AddCustomer","props","onChangeFirstName","bind","onChangeLastName","onChangeDOB","onChangePhone","onChangeEmail","onChangeMileage","saveCustomer","newCustomer","state","lastName","dob","phone","email","mileage","submitted","e","this","setState","target","value","CustomerDataService","then","response","console","log","catch","className","onClick","htmlFor","type","required","onChange","name","placeholder","Component","Customer","getCustomer","updateCustomer","deleteCustomer","currentCustomer","message","match","params","prevState","update","history","push","CustomersList","onChangeSearchFirstName","retrieveCustomers","refreshList","setActiveCustomer","removeAllCustomers","searchFirstName","customers","currentIndex","getAll","customer","index","deleteAll","findByFirstName","map","to","App","href","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.25e0b04e.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"http://localhost:3000/api\",\r\n  headers: {\r\n    \"Content-type\": \"application/json\"\r\n  }\r\n});","import http from \"../http-common\";\r\n\r\nclass CustomerDataService {\r\n  getAll() {\r\n    return http.get(\"/customers\");\r\n  }\r\n\r\n  get(id) {\r\n    return http.get(`/customers/${id}`);\r\n  }\r\n\r\n  create(data) {\r\n    return http.post(\"/customers\", data);\r\n  }\r\n\r\n  update(id, data) {\r\n    return http.put(`/customers/${id}`, data);\r\n  }\r\n\r\n  delete(id) {\r\n    return http.delete(`/customers/${id}`);\r\n  }\r\n\r\n  deleteAll() {\r\n    return http.delete(`/customers`);\r\n  }\r\n\r\n  findByFirstName(firstName) {\r\n    return http.get(`/customers?firstName=${firstName}`);\r\n  }\r\n\r\n}\r\n\r\nexport default new CustomerDataService();","import React, { Component } from \"react\";\r\nimport CustomerDataService from \"../services/customer.service\";\r\n\r\nexport default class AddCustomer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeFirstName = this.onChangeFirstName.bind(this);\r\n    this.onChangeLastName = this.onChangeLastName.bind(this);\r\n    this.onChangeDOB = this.onChangeDOB.bind(this);\r\n    this.onChangePhone = this.onChangePhone.bind(this);\r\n    this.onChangeEmail = this.onChangeEmail.bind(this);\r\n    this.onChangeMileage = this.onChangeMileage.bind(this)\r\n    this.saveCustomer = this.saveCustomer.bind(this);\r\n    this.newCustomer = this.newCustomer.bind(this);\r\n\r\n    this.state = {\r\n      id: null,\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      dob: \"\",\r\n      phone: \"\",\r\n      email: \"\",\r\n      mileage: \"\",\r\n      // description: \"\",\r\n      // published: false,\r\n\r\n      submitted: false,\r\n    };\r\n  }\r\n\r\n  onChangeFirstName(e) {\r\n    this.setState({\r\n      firstName: e.target.value,\r\n    });\r\n  }\r\n\r\n  onChangeLastName(e) {\r\n    this.setState({\r\n      lastName: e.target.value,\r\n    });\r\n  }\r\n\r\n  onChangeDOB(e) {\r\n    this.setState({\r\n      dob: e.target.value\r\n    })\r\n  }\r\n\r\n  onChangePhone(e) {\r\n    this.setState({\r\n      phone: e.target.value\r\n    })\r\n  }\r\n\r\n  onChangeEmail(e) {\r\n    this.setState({\r\n      email: e.target.value\r\n    })\r\n  }\r\n\r\n  onChangeMileage(e) {\r\n    this.setState({\r\n      mileage: e.target.value\r\n    })\r\n  }\r\n\r\n  saveCustomer() {\r\n    var data = {\r\n      firstName: this.state.firstName,\r\n      lastName: this.state.lastName,\r\n      dob: this.state.dob,\r\n      phone: this.state.phone,\r\n      email: this.state.email,\r\n      mileage: this.state.mileage\r\n    };\r\n\r\n    CustomerDataService.create(data)\r\n      .then((response) => {\r\n        this.setState({\r\n          id: response.data.id,\r\n          firstName: response.data.firstName,\r\n          lastName: response.data.lastName,\r\n          dob: response.data.dob,\r\n          phone: response.data.phone,\r\n          email: response.data.email,\r\n          mileage: response.data.mileage,\r\n          // published: response.data.published,\r\n\r\n          submitted: true,\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  newCustomer() {\r\n    this.setState({\r\n      id: null,\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      dob: \"\",\r\n      phone: \"\",\r\n      email: \"\",\r\n      mileage: \"\",\r\n      // published: false,\r\n\r\n      submitted: false,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"submit-form\">\r\n        {this.state.submitted ? (\r\n          <div>\r\n            <h4>You submitted successfully!</h4>\r\n            <button className=\"btn btn-success\" onClick={this.newCustomer}>\r\n              Add\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"firstName\">First Name</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"firstName\"\r\n                required\r\n                value={this.state.firstName}\r\n                onChange={this.onChangeFirstName}\r\n                name=\"firstName\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"lastName\">Last Name</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"lastName\"\r\n                required\r\n                value={this.state.lastName}\r\n                onChange={this.onChangeLastName}\r\n                name=\"lastName\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"dob\">Date of Birth</label>\r\n              <input\r\n                type=\"date\"\r\n                className=\"form-control\"\r\n                placeholder=\"YYYY-MM-DD\"\r\n                id=\"dob\"\r\n                required\r\n                value={this.state.dob}\r\n                onChange={this.onChangeDOB}\r\n                name=\"dob\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"phone\">Phone</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"phone\"\r\n                required\r\n                value={this.state.phone}\r\n                onChange={this.onChangePhone}\r\n                name=\"phone\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"email\">E-mail</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"email\"\r\n                required\r\n                value={this.state.email}\r\n                onChange={this.onChangeEmail}\r\n                name=\"email\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"mileage\">Mileage</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"mileage\"\r\n                required\r\n                value={this.state.mileage}\r\n                onChange={this.onChangeMileage}\r\n                name=\"mileage\"\r\n              />\r\n            </div>\r\n\r\n            <button onClick={this.saveCustomer} className=\"btn btn-success\">\r\n              Submit\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport CustomerDataService from \"../services/customer.service\";\r\n\r\nexport default class Customer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeFirstName = this.onChangeFirstName.bind(this);\r\n    this.onChangeLastName = this.onChangeLastName.bind(this);\r\n    this.onChangeDOB = this.onChangeDOB.bind(this);\r\n    this.onChangePhone = this.onChangePhone.bind(this);\r\n    this.onChangeEmail = this.onChangeEmail.bind(this)\r\n    this.onChangeMileage = this.onChangeMileage.bind(this)\r\n    this.getCustomer = this.getCustomer.bind(this);\r\n    // this.updatePublished = this.updatePublished.bind(this);\r\n    this.updateCustomer = this.updateCustomer.bind(this);\r\n    this.deleteCustomer = this.deleteCustomer.bind(this);\r\n\r\n    this.state = {\r\n      currentCustomer: {\r\n        id: null,\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        dob: \"\",\r\n        phone: \"\",\r\n        email: \"\",\r\n        mileage: \"\",\r\n        // published: false\r\n      },\r\n      message: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getCustomer(this.props.match.params.id);\r\n  }\r\n\r\n  onChangeFirstName(e) {\r\n    const firstName = e.target.value;\r\n\r\n    this.setState(function (prevState) {\r\n      return {\r\n        currentCustomer: {\r\n          ...prevState.currentCustomer,\r\n          firstName: firstName,\r\n        },\r\n      };\r\n    });\r\n  }\r\n\r\n  onChangeLastName(e) {\r\n    const lastName = e.target.value;\r\n\r\n    this.setState((prevState) => ({\r\n      currentCustomer: {\r\n        ...prevState.currentCustomer,\r\n        lastName: lastName,\r\n      },\r\n    }));\r\n  }\r\n\r\n  onChangeDOB(e) {\r\n    const dob = e.target.value;\r\n\r\n    this.setState((prevState) => ({\r\n      currentCustomer: {\r\n        ...prevState.currentCustomer,\r\n        dob: dob,\r\n      },\r\n    }));\r\n  }\r\n\r\n  onChangePhone(e) {\r\n    const phone = e.target.value;\r\n\r\n    this.setState((prevState) => ({\r\n      currentCustomer: {\r\n        ...prevState.currentCustomer,\r\n        phone: phone,\r\n      },\r\n    }));\r\n  }\r\n\r\n  onChangeEmail(e) {\r\n    const email = e.target.value;\r\n\r\n    this.setState((prevState) => ({\r\n      currentCustomer: {\r\n        ...prevState.currentCustomer,\r\n        email: email,\r\n      },\r\n    }));\r\n  }\r\n  \r\n  onChangeMileage(e) {\r\n    const mileage = e.target.value;\r\n\r\n    this.setState((prevState) => ({\r\n      currentCustomer: {\r\n        ...prevState.currentCustomer,\r\n        mileage: mileage\r\n      }\r\n    }))\r\n  }\r\n\r\n  getCustomer(id) {\r\n    CustomerDataService.get(id)\r\n      .then((response) => {\r\n        this.setState({\r\n          currentCustomer: response.data,\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  // updatePublished(status) {\r\n  //   var data = {\r\n  //     id: this.state.currentCustomer.id,\r\n  //     firstName: this.state.currentCustomer.firstName,\r\n  //     lastName: this.state.currentCustomer.lastName,\r\n  //     // published: status\r\n  //   };\r\n\r\n  //   CustomerDataService.update(this.state.currentCustomer.id, data)\r\n  //     .then((response) => {\r\n  //       this.setState((prevState) => ({\r\n  //         currentCustomer: {\r\n  //           ...prevState.currentCustomer,\r\n  //           published: status,\r\n  //         },\r\n  //       }));\r\n  //       console.log(response.data);\r\n  //     })\r\n  //     .catch((e) => {\r\n  //       console.log(e);\r\n  //     });\r\n  // }\r\n\r\n  updateCustomer() {\r\n    CustomerDataService.update(\r\n      this.state.currentCustomer.id,\r\n      this.state.currentCustomer\r\n    )\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        this.setState({\r\n          message: \"The tutorial was updated successfully!\",\r\n        });\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  deleteCustomer() {\r\n    CustomerDataService.delete(this.state.currentCustomer.id)\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        this.props.history.push(\"/customers\");\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { currentCustomer } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        {currentCustomer ? (\r\n          <div className=\"edit-form\">\r\n            <h4>Customer</h4>\r\n            <form>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"firstName\">First Name</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"firstName\"\r\n                  value={currentCustomer.firstName}\r\n                  onChange={this.onChangeFirstName}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"lastName\">Last Name</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"lastName\"\r\n                  value={currentCustomer.lastName}\r\n                  onChange={this.onChangeLastName}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"dob\">DOB</label>\r\n                <input\r\n                  type=\"date\"\r\n                  className=\"form-control\"\r\n                  id=\"dob\"\r\n                  value={currentCustomer.dob}\r\n                  onChange={this.onChangeDOB}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"phone\">Phone</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"phone\"\r\n                  value={currentCustomer.phone}\r\n                  onChange={this.onChangePhone}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"email\">E-mail</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"email\"\r\n                  value={currentCustomer.email}\r\n                  onChange={this.onChangeEmail}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"mileage\">Mileage</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"mileage\"\r\n                  value={currentCustomer.mileage}\r\n                  onChange={this.onChangeMileage}\r\n                />\r\n              </div>\r\n\r\n              {/* <div className=\"form-group\">\r\n                <label>\r\n                  <strong>Status:</strong>\r\n                </label>\r\n                {currentTutorial.published ? \"Published\" : \"Pending\"}\r\n              </div> */}\r\n            </form>\r\n\r\n            {/* {currentTutorial.published ? (\r\n              <button\r\n                className=\"badge badge-primary mr-2\"\r\n                onClick={() => this.updatePublished(false)}\r\n              >\r\n                UnPublish\r\n              </button>\r\n            ) : (\r\n              <button\r\n                className=\"badge bg-primary mr-2\"\r\n                onClick={() => this.updatePublished(true)}\r\n              >\r\n                Publish\r\n              </button>\r\n            )} */}\r\n\r\n            <button\r\n              className=\"badge bg-danger mr-2\"\r\n              onClick={this.deleteCustomer}\r\n            >\r\n              Delete\r\n            </button>\r\n\r\n            <button\r\n              type=\"submit\"\r\n              className=\"badge bg-success mr-2\"\r\n              onClick={this.updateCustomer}\r\n            >\r\n              Update\r\n            </button>\r\n            <p>{this.state.message}</p>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <br />\r\n            <p>Please click on a Customer...</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport CustomerDataService from \"../services/customer.service\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class CustomersList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeSearchFirstName = this.onChangeSearchFirstName.bind(this);\r\n    this.retrieveCustomers = this.retrieveCustomers.bind(this);\r\n    this.refreshList = this.refreshList.bind(this);\r\n    this.setActiveCustomer = this.setActiveCustomer.bind(this);\r\n    this.removeAllCustomers = this.removeAllCustomers.bind(this);\r\n    this.searchFirstName = this.searchFirstName.bind(this);\r\n\r\n    this.state = {\r\n      customers: [],\r\n      currentCustomer: null,\r\n      currentIndex: -1,\r\n      searchFirstName: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.retrieveCustomers();\r\n  }\r\n\r\n  onChangeSearchFirstName(e) {\r\n    const searchFirstName = e.target.value;\r\n\r\n    this.setState({\r\n      searchFirstName: searchFirstName,\r\n    });\r\n  }\r\n\r\n  retrieveCustomers() {\r\n    CustomerDataService.getAll()\r\n      .then((response) => {\r\n        this.setState({\r\n          customers: response.data,\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  refreshList() {\r\n    this.retrieveCustomers();\r\n    this.setState({\r\n      currentCustomer: null,\r\n      currentIndex: -1,\r\n    });\r\n  }\r\n\r\n  setActiveCustomer(customer, index) {\r\n    this.setState({\r\n      currentCustomer: customer,\r\n      currentIndex: index,\r\n    });\r\n  }\r\n\r\n  removeAllCustomers() {\r\n    CustomerDataService.deleteAll()\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        this.refreshList();\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  searchFirstName() {\r\n    CustomerDataService.findByFirstName(this.state.searchFirstName)\r\n      .then((response) => {\r\n        this.setState({\r\n          customers: response.data,\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { searchFirstName, customers, currentCustomer, currentIndex } =\r\n      this.state;\r\n\r\n    return (\r\n      <div className=\"list row\">\r\n        <div className=\"col-md-8\">\r\n          <div className=\"input-group mb-3\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Search by First Name\"\r\n              value={searchFirstName}\r\n              onChange={this.onChangeSearchFirstName}\r\n            />\r\n            <div className=\"input-group-append\">\r\n              <button\r\n                className=\"btn btn-outline-secondary\"\r\n                type=\"button\"\r\n                onClick={this.searchFirstName}\r\n              >\r\n                Search\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <h4>Customers List</h4>\r\n\r\n          <ul className=\"list-group\">\r\n            {customers &&\r\n              customers.map((customer, index) => (\r\n                <li\r\n                  className={\r\n                    \"list-group-item \" +\r\n                    (index === currentIndex ? \"active\" : \"\")\r\n                  }\r\n                  onClick={() => this.setActiveCustomer(customer, index)}\r\n                  key={index}\r\n                >\r\n                  {customer.firstName}\r\n                </li>\r\n              ))}\r\n          </ul>\r\n\r\n          <button\r\n            className=\"m-3 btn btn-sm btn-danger\"\r\n            onClick={this.removeAllCustomers}\r\n          >\r\n            Remove All\r\n          </button>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          {currentCustomer ? (\r\n            <div>\r\n              <h4>Customer</h4>\r\n              <div>\r\n                <label>\r\n                  <strong>First Name:</strong>\r\n                </label>{\" \"}\r\n                {currentCustomer.firstName}\r\n              </div>\r\n              <div>\r\n                <label>\r\n                  <strong>Last Name:</strong>\r\n                </label>{\" \"}\r\n                {currentCustomer.lastName}\r\n              </div>\r\n              <div>\r\n                <label>\r\n                  <strong>DOB:</strong>\r\n                </label>{\" \"}\r\n                {currentCustomer.dob}\r\n              </div>\r\n              <div>\r\n                <label>\r\n                  <strong>Phone:</strong>\r\n                </label>{\" \"}\r\n                {currentCustomer.phone}\r\n              </div>\r\n              <div>\r\n                <label>\r\n                  <strong>E-mail:</strong>\r\n                </label>{\" \"}\r\n                {currentCustomer.email}\r\n              </div>\r\n              <div>\r\n                <label>\r\n                  <strong>Mileage:</strong>\r\n                </label>{\" \"}\r\n                {currentCustomer.mileage}\r\n              </div>\r\n              {/* <div>\r\n                <label>\r\n                  <strong>Status:</strong>\r\n                </label>{\" \"}\r\n                {currentTutorial.published ? \"Published\" : \"Pending\"}\r\n              </div> */}\r\n\r\n              <Link\r\n                to={\"/customers/\" + currentCustomer.id}\r\n                className=\"badge bg-warning text-dark\"\r\n              >\r\n                Edit\r\n              </Link>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <br />\r\n              <p>Please click on a Customer...</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport AddCustomer from \"./components/add-customer.component\";\nimport Customer from \"./components/customer.component\";\nimport CustomersList from \"./components/customers-list.component\";\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n          <a href=\"/customers\" className=\"navbar-brand\">\n            bezKoder\n          </a>\n          <div className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <Link to={\"/customers\"} className=\"nav-link\">\n                Customers\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to={\"/add\"} className=\"nav-link\">\n                Add Customer\n              </Link>\n            </li>\n          </div>\n        </nav>\n\n        <div className=\"container mt-3\">\n          <Switch>\n            <Route exact path={[\"/\", \"/customers\"]} component={CustomersList} />\n            <Route exact path=\"/add\" component={AddCustomer} />\n            <Route path=\"/customers/:id\" component={Customer} />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service '\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all '\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n            headers: {\r\n                'Service-Worker': 'script'\r\n            },\r\n        })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}